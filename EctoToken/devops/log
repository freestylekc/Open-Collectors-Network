{ console: [Getter],
  global: [Circular],
  process: 
   process {
     title: 'node',
     version: 'v8.10.0',
     moduleLoadList: 
      [ 'Binding contextify',
        'Binding natives',
        'Binding config',
        'NativeModule events',
        'Binding async_wrap',
        'Binding icu',
        'NativeModule util',
        'NativeModule internal/errors',
        'NativeModule internal/encoding',
        'NativeModule internal/util',
        'Binding util',
        'Binding constants',
        'NativeModule internal/util/types',
        'Binding buffer',
        'NativeModule buffer',
        'NativeModule internal/buffer',
        'Binding uv',
        'NativeModule internal/process',
        'NativeModule internal/process/warning',
        'NativeModule internal/process/next_tick',
        'NativeModule internal/async_hooks',
        'NativeModule internal/process/promises',
        'NativeModule internal/process/stdio',
        'Binding performance',
        'NativeModule perf_hooks',
        'NativeModule internal/linkedlist',
        'NativeModule internal/trace_events_async_hooks',
        'Binding trace_events',
        'NativeModule async_hooks',
        'NativeModule internal/inspector_async_hook',
        'Binding inspector',
        'NativeModule timers',
        'Binding timer_wrap',
        'NativeModule assert',
        'NativeModule module',
        'NativeModule internal/module',
        'NativeModule internal/url',
        'NativeModule internal/querystring',
        'NativeModule querystring',
        'Binding url',
        'NativeModule vm',
        'NativeModule fs',
        'NativeModule path',
        'Binding fs',
        'NativeModule stream',
        'NativeModule internal/streams/legacy',
        'NativeModule _stream_readable',
        'NativeModule internal/streams/BufferList',
        'NativeModule internal/streams/destroy',
        'NativeModule _stream_writable',
        'NativeModule _stream_duplex',
        'NativeModule _stream_transform',
        'NativeModule _stream_passthrough',
        'Binding fs_event_wrap',
        'NativeModule internal/fs',
        'NativeModule internal/loader/Loader',
        'NativeModule internal/loader/ModuleWrap',
        'Internal Binding module_wrap',
        'NativeModule internal/loader/ModuleMap',
        'NativeModule internal/loader/ModuleJob',
        'NativeModule internal/safe_globals',
        'NativeModule internal/loader/ModuleRequest',
        'NativeModule url',
        'NativeModule internal/loader/search',
        'NativeModule console',
        'Binding tty_wrap',
        'NativeModule tty',
        'NativeModule net',
        'NativeModule internal/net',
        'Binding cares_wrap',
        'Binding tcp_wrap',
        'Binding pipe_wrap',
        'Binding stream_wrap',
        'NativeModule dns',
        'NativeModule readline',
        'NativeModule string_decoder',
        'NativeModule internal/readline',
        'Binding signal_wrap',
        'NativeModule child_process',
        'Binding spawn_sync',
        'NativeModule internal/child_process',
        'NativeModule dgram',
        'Binding udp_wrap',
        'Binding process_wrap',
        'NativeModule internal/socket_list',
        'NativeModule http',
        'NativeModule _http_agent',
        'NativeModule _http_client',
        'Binding http_parser',
        'NativeModule _http_common',
        'NativeModule internal/freelist',
        'NativeModule internal/http',
        'NativeModule _http_incoming',
        'NativeModule _http_outgoing',
        'NativeModule _http_server',
        'NativeModule https',
        'NativeModule tls',
        'Binding crypto',
        'NativeModule _tls_common',
        'NativeModule _tls_wrap',
        ... 13 more items ],
     versions: 
      { http_parser: '2.7.1',
        node: '8.10.0',
        v8: '6.2.414.50',
        uv: '1.18.0',
        zlib: '1.2.11',
        ares: '1.14.0',
        modules: '57',
        nghttp2: '1.30.0',
        openssl: '1.1.0g',
        icu: '60.2',
        unicode: '10.0',
        cldr: '32.0.1',
        tz: '2017c' },
     arch: 'x64',
     platform: 'linux',
     release: 
      { name: 'node',
        lts: 'Carbon',
        sourceUrl: 'https://nodejs.org/download/release/v8.10.0/node-v8.10.0.tar.gz',
        headersUrl: 'https://nodejs.org/download/release/v8.10.0/node-v8.10.0-headers.tar.gz' },
     argv: [ '/usr/bin/node', '/usr/local/bin/truffle', 'test' ],
     execArgv: [],
     env: 
      { CLUTTER_IM_MODULE: 'xim',
        LS_COLORS: 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:',
        LC_MEASUREMENT: 'ro_RO.UTF-8',
        LESSCLOSE: '/usr/bin/lesspipe %s %s',
        LC_PAPER: 'ro_RO.UTF-8',
        LC_MONETARY: 'ro_RO.UTF-8',
        XDG_MENU_PREFIX: 'gnome-',
        LANG: 'en_US.UTF-8',
        DISPLAY: ':0',
        OLDPWD: '/home/andrei/Documents/open-collectors-network/EctoToken',
        GNOME_SHELL_SESSION_MODE: 'ubuntu',
        COLORTERM: 'truecolor',
        USERNAME: 'andrei',
        XDG_VTNR: '1',
        SSH_AUTH_SOCK: '/run/user/1000/keyring/ssh',
        LC_NAME: 'ro_RO.UTF-8',
        XDG_SESSION_ID: '1',
        USER: 'andrei',
        DESKTOP_SESSION: 'ubuntu',
        QT4_IM_MODULE: 'xim',
        TEXTDOMAINDIR: '/usr/share/locale/',
        GNOME_TERMINAL_SCREEN: '/org/gnome/Terminal/screen/5e0d3f71_60e5_4a79_91dd_626ef87fc1e2',
        PWD: '/home/andrei/Documents/open-collectors-network/EctoToken/devops',
        HOME: '/home/andrei',
        TEXTDOMAIN: 'im-config',
        SSH_AGENT_PID: '1198',
        QT_ACCESSIBILITY: '1',
        XDG_SESSION_TYPE: 'x11',
        XDG_DATA_DIRS: '/usr/share/ubuntu:/usr/local/share:/usr/share:/var/lib/snapd/desktop',
        XDG_SESSION_DESKTOP: 'ubuntu',
        LC_ADDRESS: 'ro_RO.UTF-8',
        GJS_DEBUG_OUTPUT: 'stderr',
        LC_NUMERIC: 'ro_RO.UTF-8',
        GTK_MODULES: 'gail:atk-bridge',
        WINDOWPATH: '1',
        VTE_VERSION: '5201',
        TERM: 'xterm-256color',
        SHELL: '/bin/bash',
        QT_IM_MODULE: 'xim',
        XMODIFIERS: '@im=ibus',
        IM_CONFIG_PHASE: '2',
        XDG_CURRENT_DESKTOP: 'ubuntu:GNOME',
        GPG_AGENT_INFO: '/run/user/1000/gnupg/S.gpg-agent:0:1',
        GNOME_TERMINAL_SERVICE: ':1.97',
        XDG_SEAT: 'seat0',
        SHLVL: '1',
        LC_TELEPHONE: 'ro_RO.UTF-8',
        GDMSESSION: 'ubuntu',
        GNOME_DESKTOP_SESSION_ID: 'this-is-deprecated',
        LOGNAME: 'andrei',
        DBUS_SESSION_BUS_ADDRESS: 'unix:path=/run/user/1000/bus',
        XDG_RUNTIME_DIR: '/run/user/1000',
        XAUTHORITY: '/run/user/1000/gdm/Xauthority',
        XDG_CONFIG_DIRS: '/etc/xdg/xdg-ubuntu:/etc/xdg',
        PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin',
        LC_IDENTIFICATION: 'ro_RO.UTF-8',
        GJS_DEBUG_TOPICS: 'JS ERROR;JS LOG',
        SESSION_MANAGER: 'local/andrei-laptop:@/tmp/.ICE-unix/1057,unix/andrei-laptop:/tmp/.ICE-unix/1057',
        LESSOPEN: '| /usr/bin/lesspipe %s',
        GTK_IM_MODULE: 'ibus',
        LC_TIME: 'ro_RO.UTF-8',
        _: '/usr/local/bin/truffle' },
     pid: 26958,
     features: 
      { debug: false,
        uv: true,
        ipv6: true,
        tls_npn: true,
        tls_alpn: true,
        tls_sni: true,
        tls_ocsp: true,
        tls: true },
     ppid: 9751,
     execPath: '/usr/bin/node',
     debugPort: 9229,
     _startProfilerIdleNotifier: [Function: _startProfilerIdleNotifier],
     _stopProfilerIdleNotifier: [Function: _stopProfilerIdleNotifier],
     _getActiveRequests: [Function: _getActiveRequests],
     _getActiveHandles: [Function: _getActiveHandles],
     reallyExit: [Function: reallyExit],
     abort: [Function: abort],
     chdir: [Function],
     cwd: [Function],
     umask: [Function: umask],
     getuid: [Function: getuid],
     geteuid: [Function: geteuid],
     setuid: [Function: setuid],
     seteuid: [Function: seteuid],
     setgid: [Function: setgid],
     setegid: [Function: setegid],
     getgid: [Function: getgid],
     getegid: [Function: getegid],
     getgroups: [Function: getgroups],
     setgroups: [Function: setgroups],
     initgroups: [Function: initgroups],
     _kill: [Function: _kill],
     _debugProcess: [Function: _debugProcess],
     _debugPause: [Function: _debugPause],
     _debugEnd: [Function: _debugEnd],
     hrtime: [Function: hrtime],
     cpuUsage: [Function: cpuUsage],
     dlopen: [Function: dlopen],
     uptime: [Function: uptime],
     memoryUsage: [Function: memoryUsage],
     binding: [Function: binding],
     _linkedBinding: [Function: _linkedBinding],
     _setupDomainUse: [Function: _setupDomainUse],
     _events: 
      { newListener: [Function],
        removeListener: [Function],
        warning: [Function],
        SIGWINCH: [Function],
        exit: [Array] },
     _rawDebug: [Function],
     _eventsCount: 5,
     domain: null,
     _maxListeners: undefined,
     _fatalException: [Function],
     _exiting: false,
     assert: [Function],
     config: { target_defaults: [Object], variables: [Object] },
     emitWarning: [Function],
     nextTick: [Function: nextTick],
     _tickCallback: [Function: _tickCallback],
     _tickDomainCallback: [Function: _tickDomainCallback],
     stdout: [Getter],
     stderr: [Getter],
     stdin: [Getter],
     openStdin: [Function],
     exit: [Function],
     kill: [Function],
     _immediateCallback: [Function: processImmediate],
     argv0: 'node',
     mainModule: 
      Module {
        id: '.',
        exports: {},
        parent: null,
        filename: '/usr/local/lib/node_modules/truffle/build/cli.bundled.js',
        loaded: false,
        children: [Array],
        paths: [Array] },
     emit: [Function],
     __signal_exit_emitter__: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: Infinity,
        count: 0,
        emitted: {},
        infinite: true } },
  Buffer: 
   { [Function: Buffer]
     poolSize: 8192,
     from: [Function],
     alloc: [Function],
     allocUnsafe: [Function],
     allocUnsafeSlow: [Function],
     isBuffer: [Function: isBuffer],
     compare: [Function: compare],
     isEncoding: [Function],
     concat: [Function],
     byteLength: [Function: byteLength],
     [Symbol(node.isEncoding)]: [Function] },
  clearImmediate: [Function],
  clearInterval: [Function],
  clearTimeout: [Function],
  setImmediate: { [Function: setImmediate] [Symbol(util.promisify.custom)]: [Function] },
  setInterval: [Function],
  setTimeout: { [Function: setTimeout] [Symbol(util.promisify.custom)]: [Function] },
  _: 
   { [Function: pn]
     templateSettings: 
      { escape: /<%-([\s\S]+?)%>/g,
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        variable: '',
        imports: [Object] },
     after: [Function],
     ary: [Function: $i],
     assign: [Function],
     assignIn: [Function],
     assignInWith: [Function],
     assignWith: [Function],
     at: [Function],
     before: [Function: ef],
     bind: { [Function] placeholder: [Circular] },
     bindAll: [Function],
     bindKey: { [Function] placeholder: [Circular] },
     castArray: [Function],
     chain: [Function: Li],
     chunk: [Function],
     compact: [Function],
     concat: [Function],
     cond: [Function],
     conforms: [Function],
     constant: [Function: Co],
     countBy: [Function],
     create: [Function],
     curry: { [Function: e] placeholder: [Circular] },
     curryRight: { [Function: e] placeholder: [Circular] },
     debounce: [Function: nf],
     defaults: [Function],
     defaultsDeep: [Function],
     defer: [Function],
     delay: [Function],
     difference: [Function],
     differenceBy: [Function],
     differenceWith: [Function],
     drop: [Function],
     dropRight: [Function],
     dropRightWhile: [Function],
     dropWhile: [Function],
     fill: [Function],
     filter: [Function],
     flatMap: [Function],
     flatMapDeep: [Function],
     flatMapDepth: [Function],
     flatten: [Function: vi],
     flattenDeep: [Function],
     flattenDepth: [Function],
     flip: [Function],
     flow: [Function],
     flowRight: [Function],
     fromPairs: [Function],
     functions: [Function],
     functionsIn: [Function],
     groupBy: [Function],
     initial: [Function],
     intersection: [Function],
     intersectionBy: [Function],
     intersectionWith: [Function],
     invert: [Function],
     invertBy: [Function],
     invokeMap: [Function],
     iteratee: [Function: Fo],
     keyBy: [Function],
     keys: [Function: ro],
     keysIn: [Function: co],
     map: [Function: Zi],
     mapKeys: [Function],
     mapValues: [Function],
     matches: [Function],
     matchesProperty: [Function],
     memoize: { [Function: ff] Cache: [Function: wn] },
     merge: [Function],
     mergeWith: [Function],
     method: [Function],
     methodOf: [Function],
     mixin: [Function: No],
     negate: [Function: of],
     nthArg: [Function],
     omit: [Function],
     omitBy: [Function],
     once: [Function],
     orderBy: [Function],
     over: [Function],
     overArgs: [Function],
     overEvery: [Function],
     overSome: [Function],
     partial: { [Function] placeholder: [Circular] },
     partialRight: { [Function] placeholder: [Circular] },
     partition: [Function],
     pick: [Function],
     pickBy: [Function: bo],
     property: [Function: zo],
     propertyOf: [Function],
     pull: [Function],
     pullAll: [Function: ki],
     pullAllBy: [Function],
     pullAllWith: [Function],
     pullAt: [Function],
     range: [Function],
     rangeRight: [Function],
     rearg: [Function],
     reject: [Function],
     remove: [Function],
     rest: [Function],
     reverse: [Function: Si],
     sampleSize: [Function],
     set: [Function],
     setWith: [Function],
     shuffle: [Function],
     slice: [Function],
     sortBy: [Function],
     sortedUniq: [Function],
     sortedUniqBy: [Function],
     split: [Function],
     spread: [Function],
     tail: [Function],
     take: [Function],
     takeRight: [Function],
     takeRightWhile: [Function],
     takeWhile: [Function],
     tap: [Function],
     throttle: [Function],
     thru: [Function: Di],
     toArray: [Function: Df],
     toPairs: [Function],
     toPairsIn: [Function],
     toPath: [Function],
     toPlainObject: [Function: Vf],
     transform: [Function],
     unary: [Function],
     union: [Function],
     unionBy: [Function],
     unionWith: [Function],
     uniq: [Function],
     uniqBy: [Function],
     uniqWith: [Function],
     unset: [Function],
     unzip: [Function: Ri],
     unzipWith: [Function: ji],
     update: [Function],
     updateWith: [Function],
     values: [Function: po],
     valuesIn: [Function],
     without: [Function],
     words: [Function: Eo],
     wrap: [Function],
     xor: [Function],
     xorBy: [Function],
     xorWith: [Function],
     zip: [Function],
     zipObject: [Function],
     zipObjectDeep: [Function],
     zipWith: [Function],
     entries: [Function],
     entriesIn: [Function],
     extend: [Function],
     extendWith: [Function],
     add: [Function],
     attempt: [Function],
     camelCase: [Function],
     capitalize: [Function: mo],
     ceil: [Function],
     clamp: [Function],
     clone: [Function],
     cloneDeep: [Function],
     cloneDeepWith: [Function],
     cloneWith: [Function],
     conformsTo: [Function],
     deburr: [Function: vo],
     defaultTo: [Function],
     divide: [Function],
     endsWith: [Function],
     eq: [Function: lf],
     escape: [Function],
     escapeRegExp: [Function],
     every: [Function],
     find: [Function],
     findIndex: [Function: hi],
     findKey: [Function],
     findLast: [Function],
     findLastIndex: [Function: mi],
     findLastKey: [Function],
     floor: [Function],
     forEach: [Function: Vi],
     forEachRight: [Function: Gi],
     forIn: [Function],
     forInRight: [Function],
     forOwn: [Function],
     forOwnRight: [Function],
     get: [Function: $f],
     gt: [Function],
     gte: [Function],
     has: [Function],
     hasIn: [Function: eo],
     head: [Function: gi],
     identity: [Function: jo],
     includes: [Function],
     indexOf: [Function],
     inRange: [Function],
     invoke: [Function],
     isArguments: [Function: cr],
     isArray: [Function: isArray],
     isArrayBuffer: [Function],
     isArrayLike: [Function: yf],
     isArrayLikeObject: [Function: _f],
     isBoolean: [Function],
     isBuffer: [Function: isBuffer],
     isDate: [Function],
     isElement: [Function],
     isEmpty: [Function],
     isEqual: [Function],
     isEqualWith: [Function],
     isError: [Function: xf],
     isFinite: [Function],
     isFunction: [Function: kf],
     isInteger: [Function: Ef],
     isLength: [Function: Sf],
     isMap: [Function],
     isMatch: [Function],
     isMatchWith: [Function],
     isNaN: [Function],
     isNative: [Function],
     isNil: [Function],
     isNull: [Function],
     isNumber: [Function: Rf],
     isObject: [Function: Tf],
     isObjectLike: [Function: Cf],
     isPlainObject: [Function: jf],
     isRegExp: [Function],
     isSafeInteger: [Function],
     isSet: [Function],
     isString: [Function: Bf],
     isSymbol: [Function: Nf],
     isTypedArray: [Function],
     isUndefined: [Function],
     isWeakMap: [Function],
     isWeakSet: [Function],
     join: [Function],
     kebabCase: [Function],
     last: [Function: Ai],
     lastIndexOf: [Function],
     lowerCase: [Function],
     lowerFirst: [Function],
     lt: [Function],
     lte: [Function],
     max: [Function],
     maxBy: [Function],
     mean: [Function],
     meanBy: [Function],
     min: [Function],
     minBy: [Function],
     stubArray: [Function: qo],
     stubFalse: [Function: Vo],
     stubObject: [Function],
     stubString: [Function],
     stubTrue: [Function],
     multiply: [Function],
     nth: [Function],
     noConflict: [Function],
     noop: [Function: Io],
     now: [Function],
     pad: [Function],
     padEnd: [Function],
     padStart: [Function],
     parseInt: [Function],
     random: [Function],
     reduce: [Function],
     reduceRight: [Function],
     repeat: [Function],
     replace: [Function],
     result: [Function],
     round: [Function],
     runInContext: [Function: e],
     sample: [Function],
     size: [Function],
     snakeCase: [Function],
     some: [Function],
     sortedIndex: [Function],
     sortedIndexBy: [Function],
     sortedIndexOf: [Function],
     sortedLastIndex: [Function],
     sortedLastIndexBy: [Function],
     sortedLastIndexOf: [Function],
     startCase: [Function],
     startsWith: [Function],
     subtract: [Function],
     sum: [Function],
     sumBy: [Function],
     template: [Function],
     times: [Function],
     toFinite: [Function: zf],
     toInteger: [Function: Uf],
     toLength: [Function: Hf],
     toLower: [Function],
     toNumber: [Function: qf],
     toSafeInteger: [Function],
     toString: [Function: Gf],
     toUpper: [Function],
     trim: [Function],
     trimEnd: [Function],
     trimStart: [Function],
     truncate: [Function],
     unescape: [Function],
     uniqueId: [Function],
     upperCase: [Function],
     upperFirst: [Function],
     each: [Function: Vi],
     eachRight: [Function: Gi],
     first: [Function: gi],
     VERSION: '4.17.5' },
  XMLHttpRequest: [Function],
  '__core-js_shared__': 
   { keys: { IE_PROTO: 'Symbol(IE_PROTO)_1.hava4yvaiq' },
     wks: 
      { toStringTag: Symbol(Symbol.toStringTag),
        iterator: Symbol(Symbol.iterator),
        species: Symbol(Symbol.species),
        _hidden: Symbol(Symbol._hidden),
        toPrimitive: Symbol(Symbol.toPrimitive),
        hasInstance: Symbol(Symbol.hasInstance),
        isConcatSpreadable: Symbol(Symbol.isConcatSpreadable),
        match: Symbol(Symbol.match),
        replace: Symbol(Symbol.replace),
        search: Symbol(Symbol.search),
        split: Symbol(Symbol.split),
        unscopables: Symbol(Symbol.unscopables),
        asyncIterator: Symbol(Symbol.asyncIterator),
        observable: Symbol(Symbol.observable) },
     'symbol-registry': {},
     symbols: {},
     'op-symbols': {},
     versions: [ [Object], [Object] ],
     metadata: { store: WeakMap {} } },
  '@@any-promise/REGISTRATION': 
   { Promise: [Function: Promise],
     implementation: 'global.Promise' },
  StateManager: [Function: StateManager],
  core: 
   { version: '2.5.7',
     inspectSource: [Function],
     prototype: {},
     Object: { prototype: {} },
     JSON: { prototype: {} },
     Function: { prototype: [Object] },
     Number: { prototype: [Object] },
     Math: { prototype: {} },
     String: { prototype: [Object] },
     Date: { prototype: [Object] },
     Array: { prototype: [Object] },
     getIteratorMethod: [Function],
     Reflect: { prototype: {} },
     System: { prototype: {} },
     Error: { prototype: {} },
     RegExp: { prototype: {} } },
  System: {},
  asap: [Function: asap],
  Observable: [Function: Observable],
  regeneratorRuntime: 
   { wrap: [Function: wrap],
     isGeneratorFunction: [Function],
     mark: [Function],
     awrap: [Function],
     AsyncIterator: [Function: AsyncIterator],
     async: [Function],
     keys: [Function],
     values: [Function: values] },
  _babelPolyfill: true }
